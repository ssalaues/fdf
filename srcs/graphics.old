/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   graphics.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ssalaues <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/03/05 16:31:32 by ssalaues          #+#    #+#             */
/*   Updated: 2017/03/12 15:09:00 by ssalaues         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"

int		iso_x(int y, int x)
{
//	return ((x * (TILE_W / 2) - y * (TILE_W / 2)));
	return ((x - y) * TILE_W);
}

int		iso_y(int x, int y)
{
//	return ((x * (TILE_H / 2) + y * (TILE_H / 2)));
	return ((x + y) * TILE_H);
}

void	swap(int *a, int *b)
{
	int	tmp;

	tmp = *a;
	*a = *b;
	*b = tmp;
}

void	b_line(t_fdf fdf, int x1, int y1, int x2, int y2)//Original Implementation of Bresenham's Line Algo
{
	int	dx;
	int	dy;
	int	y;
	int	x;
	int	eps;
	int c1 = 0xfffd4;
	int c2 = 0xff34b3;
	int stp = 0;
	int	der;

	if (ft_abs(x1 - x2) < ft_abs(y1 - y2))
		swap(&x1, &y1);
		swap(&x2, &y2);
		stp = 1;
	if (x1 > x2)
		swap(&x1, &x2);
		swap(&y1, &y2);
	dx = x2 - x1;
	dy = y2 - y1;
	der = ft_abs(dy) << 1;
	eps = 0;
	y = y1;
	x = x1;
	while (x <= x2)	//Y2 should be value + TILE_W
	{
		if (stp)
		{
//			mlx_pixel_put(fdf.mlx, fdf.win, (iso_x(y, x)), (iso_y(x, y)), c2);
			mlx_pixel_put(fdf.mlx, fdf.win, (y), (x), c2);
			printf("fusia x:%d y:%d  ",x,y);
		}
		else
		{
//			mlx_pixel_put(fdf.mlx, fdf.win,(iso_y(x, y)), (iso_x(y, x)), c1);
			mlx_pixel_put(fdf.mlx, fdf.win, (x), (y), c1);
			printf("green x:%d y:%d  ",x,y);
		}
		eps += der;
		if (eps > dx)
		{
			y += (y2 > y1 ? 1 : -1);
			eps -= dx;
		}
		x++;
	}
}

int			g_iso(t_fdf fdf)
{
	int 	*ary;

	fdf.y1 = 0;
	while (fdf.y >= fdf.y1)
	{
		fdf.x1 = 0;
		ary = *fdf.ary;
		fdf.x = *ary * TILE_W;
		fdf.x--;
		ary++;
		while(fdf.x > fdf.x1)
		{
			fdf.h = *ary;
			b_line(fdf, fdf.x1, fdf.y1, (fdf.x1 * TILE_W), (fdf.y1 * TILE_H));
		//	printf("Tile:%d,%d Height:%d\n",fdf.x1,fdf.y1,*ary);
			ary++;
			fdf.x1 += TILE_W;
		}
		fdf.ary++;
		fdf.y1 += TILE_H;
	}
	printf("done with function\n");
	return (0);
}
